const ecP256PrivateKeyPem = `-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg2hGAxGDaNwlZ5oJg
FigAcy5MKUDUtCc3xJu6abJqPcGhRANCAATrrGepSpjLCfW60iHb2SopJvSG+Yty
JFQHxMW//yQrrsxMN0BJ3PVE77f0QCy+rMEXZSXSrN+tpVRl0TWOGqNJ
-----END PRIVATE KEY-----`

const ecP256Cert = `-----BEGIN CERTIFICATE-----
MIIC/jCCAqWgAwIBAgIUZXSBIdEWprI4T2+4Krj3g36StCYwCgYIKoZIzj0EAwIw
XDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4w
DAYDVQQKDAVNeU9yZzELMAkGA1UECwwCQ0ExETAPBgNVBAMMCE15Um9vdENBMB4X
DTI1MTAwMTE5MDUzM1oXDTI2MTAwMTE5MDUzM1owYTELMAkGA1UEBhMCVVMxDTAL
BgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4wDAYDVQQKDAVNeU9yZzEQMA4G
A1UECwwHU2lnbmluZzERMA8GA1UEAwwISm9obiBEb2UwWTATBgcqhkjOPQIBBggq
hkjOPQMBBwNCAATrrGepSpjLCfW60iHb2SopJvSG+YtyJFQHxMW//yQrrsxMN0BJ
3PVE77f0QCy+rMEXZSXSrN+tpVRl0TWOGqNJo4IBPjCCATowCQYDVR0TBAIwADAL
BgNVHQ8EBAMCBsAwHQYDVR0lBBYwFAYIKwYBBQUHAwQGCCsGAQUFBwMDMC0GA1Ud
HwQmMCQwIqAgoB6GHGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9jYS5jcmwwgZEGCCsG
AQUFBwEBBIGEMIGBMCgGCCsGAQUFBzAChhxodHRwOi8vbG9jYWxob3N0OjgwODAv
Y2EuY3J0MCYGCCsGAQUFBzABhhpodHRwOi8vbG9jYWxob3N0OjgwODAvb2NzcDAt
BggrBgEFBQcwAYYhaHR0cDovL2xvY2FsaG9zdDo4MDgwL29jc3AtYmFja3VwMB0G
A1UdDgQWBBR7GDoY93FDER9NWzjedbn1bqXpITAfBgNVHSMEGDAWgBTyfmEQSxl6
lsLgI7oHqlRtDyzxDzAKBggqhkjOPQQDAgNHADBEAiAIhK6plieBwuGmjvnqICfw
mBl3SuIEf+LwIcSsExU0FQIgOkBEl3951v6WTT4gmETWRMewj/63RcqEHIZk+Lb5
RIY=
-----END CERTIFICATE-----`

const ecP256CaCert = `-----BEGIN CERTIFICATE-----
MIICDDCCAbOgAwIBAgIUeWvXUQjmbBAS2vYGCL7s4CUt6eMwCgYIKoZIzj0EAwIw
XDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4w
DAYDVQQKDAVNeU9yZzELMAkGA1UECwwCQ0ExETAPBgNVBAMMCE15Um9vdENBMB4X
DTI1MTAwMTE5MDUzM1oXDTM1MDkyOTE5MDUzM1owXDELMAkGA1UEBhMCVVMxDTAL
BgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4wDAYDVQQKDAVNeU9yZzELMAkG
A1UECwwCQ0ExETAPBgNVBAMMCE15Um9vdENBMFkwEwYHKoZIzj0CAQYIKoZIzj0D
AQcDQgAEQepKOV9lHIFuqKeiUk509En1N01TQibhz8uVColvsdauHJQ/5RPOKOhl
qZo0jFuvXbuBOKjDGwdQ04+C+r/mNqNTMFEwHQYDVR0OBBYEFPJ+YRBLGXqWwuAj
ugeqVG0PLPEPMB8GA1UdIwQYMBaAFPJ+YRBLGXqWwuAjugeqVG0PLPEPMA8GA1Ud
EwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgFtB4581lYrcbtm/ELdHakEHg
5JMNF0tMQt8Vpvs05WwCIERhpOZYdkI3/mNTe+nZRsAPA48+7L1QO5Ghpwmxq8E6
-----END CERTIFICATE-----`

const ecP256CaCrl = `-----BEGIN X509 CRL-----
MIH1MIGbAgEBMAoGCCqGSM49BAMCMFwxCzAJBgNVBAYTAlVTMQ0wCwYDVQQIDARU
ZXN0MQ4wDAYDVQQHDAVMb2NhbDEOMAwGA1UECgwFTXlPcmcxCzAJBgNVBAsMAkNB
MREwDwYDVQQDDAhNeVJvb3RDQRcNMjUxMDAxMTkwNTMzWhcNMjUxMDMxMTkwNTMz
WqAOMAwwCgYDVR0UBAMCAQEwCgYIKoZIzj0EAwIDSQAwRgIhALuGzGn8b759T3dz
jS+tjeLWEPFSr8S0xMvZtmbQmNd8AiEAx/HXJffuqFTrJ3x2KxDDAYPBxaGx4Od5
vl29BrJEBno=
-----END X509 CRL-----`

const ecP256OcspResponse = `-----BEGIN OCSP RESPONSE-----
MIIDuwoBAKCCA7QwggOwBgkrBgEFBQcwAQEEggOhMIIDnTCCAQShZjBkMQswCQYD
VQQGEwJVUzENMAsGA1UECAwEVGVzdDEOMAwGA1UEBwwFTG9jYWwxDjAMBgNVBAoM
BU15T3JnMQ0wCwYDVQQLDARPQ1NQMRcwFQYDVQQDDA5PQ1NQIFJlc3BvbmRlchgP
MjAyNTEwMDExOTA1MzNaMGQwYjBNMAkGBSsOAwIaBQAEFMMBXUhH1UJjC9/mkAgx
tU0Ghr32BBTyfmEQSxl6lsLgI7oHqlRtDyzxDwIUZXSBIdEWprI4T2+4Krj3g36S
tCaCABgPMjAyNTEwMDExOTA1MzNaoSMwITAfBgkrBgEFBQcwAQIEEgQQfcEUVWsN
8p2jcNlXQOU2ODAKBggqhkjOPQQDAgNIADBFAiEAvDQVbw8tlKkDNm+xEu3MHSod
O9aPTa1NUSGeHBobYwMCID4vPeLlY3F4+oC/uTuH7oqfkj0BHyFX8FDyPu/qn5lj
oIICOzCCAjcwggIzMIIB2aADAgECAhRldIEh0RamsjhPb7gquPeDfpK0JzAKBggq
hkjOPQQDAjBcMQswCQYDVQQGEwJVUzENMAsGA1UECAwEVGVzdDEOMAwGA1UEBwwF
TG9jYWwxDjAMBgNVBAoMBU15T3JnMQswCQYDVQQLDAJDQTERMA8GA1UEAwwITXlS
b290Q0EwIBcNMjUxMDAxMTkwNTMzWhgPMjA1MzAyMTYxOTA1MzNaMGQxCzAJBgNV
BAYTAlVTMQ0wCwYDVQQIDARUZXN0MQ4wDAYDVQQHDAVMb2NhbDEOMAwGA1UECgwF
TXlPcmcxDTALBgNVBAsMBE9DU1AxFzAVBgNVBAMMDk9DU1AgUmVzcG9uZGVyMFkw
EwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETCHvom5vblMolPlJ/5D3m0qgqk+b7fh1
Wrx8zbVVBiaQxp3UYKljVOxeV1jVka6bzgO/ykFnr3MmE9aHc8pj+qNvMG0wCQYD
VR0TBAIwADALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwkwHQYDVR0O
BBYEFEOMQFjYVu+ESJmsB/vu2H6Nd0WZMB8GA1UdIwQYMBaAFPJ+YRBLGXqWwuAj
ugeqVG0PLPEPMAoGCCqGSM49BAMCA0gAMEUCIARF+Jj2xXKsAlKDsEcAhbJkH+pX
69oOMPYzD3PdXnwaAiEA4vIZFDPtjns7qqjskLh9fPRKcnbDuY0MJsTHWGkMTw8=
-----END OCSP RESPONSE-----`

function pemToUint8Array(
    pem: string | Uint8Array<ArrayBuffer>,
): Uint8Array<ArrayBuffer> {
    pem = typeof pem === 'string' ? pem : new TextDecoder().decode(pem)

    // Remove all headers, footers, and whitespace
    const b64 = pem
        .trim()
        .replace(/-----BEGIN [^-]+-----/, '')
        .replace(/-----END [^-]+-----/, '')
        .replace(/\s+/g, '')

    const binary = atob(b64)
    const bytes = new Uint8Array(binary.length)
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i)
    }

    return bytes
}

export const ecP256SigningKeys = {
    privateKey: pemToUint8Array(ecP256PrivateKeyPem),
    cert: pemToUint8Array(ecP256Cert),
    caCert: pemToUint8Array(ecP256CaCert),
    caCrl: pemToUint8Array(ecP256CaCrl),
    ocspResponse: pemToUint8Array(ecP256OcspResponse),
    privateKeyPem: ecP256PrivateKeyPem,
    certPem: ecP256Cert,
    caCertPem: ecP256CaCert,
    caCrlPem: ecP256CaCrl,
    ocspResponsePem: ecP256OcspResponse,
}
