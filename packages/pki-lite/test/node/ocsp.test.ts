import { assert, describe, expect, test } from 'vitest'
import { rsaSigningKeys } from '../../test-fixtures/signing-keys/rsa-2048'
import { Certificate } from '../../src/x509/Certificate'
import { AuthorityInfoAccess } from '../../src/x509/extensions/AuthorityInfoAccess'
import http from 'http'

describe('OCSP (Online Certificate Status Protocol)', () => {
    test('can retrieve an OCSP response from a certificate with an Authority Information Access extension', async () => {
        const server = http
            .createServer((req, res) => {
                res.writeHead(200, { 'Content-Type': 'application/pkix-crl' })
                res.end(rsaSigningKeys.ocspResponse)
                server.close()
            })
            .listen(0)
        const certificate = Certificate.fromPem(rsaSigningKeys.certPem)

        expect(
            certificate.tbsCertificate
                .getExtensionsByName('AUTHORITY_INFO_ACCESS')[0]
                .extnValue.parseAs(AuthorityInfoAccess)
                .map((ad) => ad.accessLocation.toString()),
        ).toEqual([
            'http://localhost:8080/ca.crt',
            'http://localhost:8080/ocsp',
            'http://localhost:8080/ocsp-backup',
        ])

        // NB: This will only work if the OCSP responder is accessible
        const ocsp = await certificate.requestOcsp({
            ocspResponderUrls: [
                'http://localhost:' + (server.address() as any).port + '/ocsp',
            ],
            issuerCertificate: Certificate.fromPem(rsaSigningKeys.caCertPem),
        })

        assert(ocsp, 'No OCSP response found')
        expect(ocsp.toString()).toMatchInlineSnapshot(`
          "[OCSPResponse] SEQUENCE :
            ENUMERATED : 0
            [0] :
              SEQUENCE :
                OBJECT IDENTIFIER : 1.3.6.1.5.5.7.48.1.1
                OCTET STRING : 308206e730820104a1663064310b3009060355040613025553310d300b06035504080c0454657374310e300c06035504070c054c6f63616c310e300c060355040a0c054d794f7267310d300b060355040b0c044f4353503117301506035504030c0e4f43535020526573706f6e646572180f32303235313030313139303533305a30643062304d300906052b0e03021a05000414c3015d4847d542630bdfe6900831b54d0686bdf604141021ab93d5b7999f76e042ef981e78a7e54221f502140726dac7f46e2747c424c4225cb43fddd2afaa1a8200180f32303235313030313139303533305aa1233021301f06092b060105050730010204120410043674e832cde57ec3b22590fc759490300d06092a864886f70d01010b0500038201010031e3d574696839f3b3852fe7e5c3b30bf88f8ad6d03a55a05a53fee21a2675433b68c484832b0c11cd21214adf750027664967740f4666d97fdfc991684f27db4a5c2ef932722d631433af356d3b6023ea6bf4c60d7b2b890ff7e7c7ef8ce77191000634a83462dff916c32237ac2e7b3aa682af8cbc5a082eb8388054197cc86d18ad2418ea903e67a757a32e3787e17686bc28484747f646a8c752ca71218bc8dc71dc9318c072ea569cfcf629bad07544b9157f1092b37a9c0cf18099d0ca4aaa19ffd98984c63f25803f542a0fee0ceaf58fe1731b370cc85899d097c9bec8cb7e1851fb80f875800e7691c1215cf4f40245e716466029fb09574a84f781a08204c7308204c3308204bf308202a7a00302010202140726dac7f46e2747c424c4225cb43fddd2afaa1b300d06092a864886f70d01010b0500305c310b3009060355040613025553310d300b06035504080c0454657374310e300c06035504070c054c6f63616c310e300c060355040a0c054d794f7267310b3009060355040b0c0243413111300f06035504030c084d79526f6f7443413020170d3235313030313139303533305a180f32303533303231363139303533305a3064310b3009060355040613025553310d300b06035504080c0454657374310e300c06035504070c054c6f63616c310e300c060355040a0c054d794f7267310d300b060355040b0c044f4353503117301506035504030c0e4f43535020526573706f6e64657230820122300d06092a864886f70d01010105000382010f003082010a0282010100b408de563de2f8b6c3dcc8ade84609dd0aad7dbe50bafb69bab9387a51b419fa67130610d99c27f5fb7c77f93b2b46bcf2760662a991a3e3de553c5e83e76f358820bb4e5e844073d76252ecde28d6e33aaf6ed183c7968369317a5a2c0ad445e6fb9299ab852aa75862d2ecf880acfb9027f289c9600e67a6c60b1671d0c1a92c3fcb4384b8662b2cd6486fdfd87f26423cd2724532b697de60910e3567c7a4412ffa921619d7d5810ad3e05fc1f3de6336c739d44847a84419a1583a69f151db8ab968da8699d4a92f7fb4069206b17d71b7a25f89341266872127f5d1c3230b5b077072d5867dd04155806842428421a8554d73ddd4a1a684f09a84fce47d0203010001a36f306d30090603551d1304023000300b0603551d0f04040302078030130603551d25040c300a06082b06010505070309301d0603551d0e04160414d85c086804fea7e50ff156781c09064ebe214191301f0603551d230418301680141021ab93d5b7999f76e042ef981e78a7e54221f5300d06092a864886f70d01010b050003820201003cf6a479ac51a2f33712a1f4d0edb008217c0f8ab4f69473005929d3b8e724a7f4e8d3f97b3fc4754643ff4aaa646eab53156b7c25c57eb1c19756794682d73c6ed164891f80315908dc06c0f9dd9ed6870ebdf64f142698615c8741f067713720a1d05e205f685c0108c86d91318b2752b63e7a2bd3d38349a0b1c4d88269777a5df5a799e9ae0a34a1b09c9a9ebca432821d67f5d4771de6f9aa02fb747453d0be4c37470cef6178f9e0dbaf491d134dd7cff343f4ae22236043607b204a1e454fe253b98dbb3677612127bfa479c42eb0fbdb857ac02f797796602ef3a1ad78df8629d5bbb83abfaf7630521308bae4423df035d06b2c41d1d6ba157494c1384d3d4f7eba61319835a002a880fab97336b4bf19b653d0ff29f41dcbffa38c8e753519e7712835176e046b8d0ccd5e92865d800cffdd2ec6c65adcd7a5470f086199e56fa6ce076c205d5e1ee93fca15add60d76b2bd174684448090d4d9eefb3c72859ade835efd5787cc1b8fa55119940dd8ffb131cf16d42e2664d043e3810682f14ed50782e4daaab646d09731a8914fb23f1971e31668f6563cbbd6050f8905101f848ea812c3ec6f69cf6797834c3f9edc533a84c62e21f9e369be8ac918f7b8a71527c0cbd284decc02cb08e772936c1bbf57196ea9e2b9e4dce1bcf5888c1ac8d52ae7d34854d7892895aa4a575232b78ff11e048f740f5d5d0c40"
        `)
    })
})
