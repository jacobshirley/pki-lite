import { assert, describe, expect, test } from 'vitest'
import { rsaSigningKeys } from '../../test-fixtures/signing-keys/rsa-2048'
import { Certificate } from '../../src/x509/Certificate'
import { AuthorityInfoAccess } from '../../src/x509/extensions/AuthorityInfoAccess'
import http from 'http'

describe('OCSP (Online Certificate Status Protocol)', () => {
    test('can retrieve an OCSP response from a certificate with an Authority Information Access extension', async () => {
        const server = http
            .createServer((req, res) => {
                res.writeHead(200, { 'Content-Type': 'application/pkix-crl' })
                res.end(rsaSigningKeys.ocspResponse)
                server.close()
            })
            .listen(0)
        const certificate = Certificate.fromPem(rsaSigningKeys.certPem)

        expect(
            certificate.tbsCertificate
                .getExtensionsByName('AUTHORITY_INFO_ACCESS')[0]
                .extnValue.parseAs(AuthorityInfoAccess)
                .map((ad) => ad.accessLocation.toString()),
        ).toEqual([
            'http://localhost:8080/ca.crt',
            'http://localhost:8080/ocsp',
            'http://localhost:8080/ocsp-backup',
        ])

        // NB: This will only work if the OCSP responder is accessible
        const ocsp = await certificate.requestOcsp({
            ocspResponderUrls: ['http://localhost:' + (server.address() as any).port + '/ocsp'],
            issuerCertificate: Certificate.fromPem(rsaSigningKeys.caCertPem),
        })

        assert(ocsp, 'No OCSP response found')
        expect(ocsp.toString()).toMatchInlineSnapshot(`
          "[OCSPResponse] SEQUENCE :
            ENUMERATED : 0
            [0] :
              SEQUENCE :
                OBJECT IDENTIFIER : 1.3.6.1.5.5.7.48.1.1
                OCTET STRING : 308206e730820104a1663064310b3009060355040613025553310d300b06035504080c0454657374310e300c06035504070c054c6f63616c310e300c060355040a0c054d794f7267310d300b060355040b0c044f4353503117301506035504030c0e4f43535020526573706f6e646572180f32303235303932313130353931365a30643062304d300906052b0e03021a05000414c3015d4847d542630bdfe6900831b54d0686bdf604142b9ec2875452d6b5e8b2df6b18edf721549811ad021445e08d21404af407b4051ef9dc53e8205c1073dc8200180f32303235303932313130353931365aa1233021301f06092b060105050730010204120410ec9d54aa2c3d29baa2e126a5e0e384a2300d06092a864886f70d01010b0500038201010032c2bafc8e82ce2556a1b9a0d81f03be9633e18ff63252917f91a7068f5139ab728b784afee54da68fac601940fd2a2e0bc5f84745ff64cf573321ba4ab6f505216740933718f92d615bc67fc35db6949bca77aa5963a505688a4fde9218aa17b305b685f3a8c70132cc660e28f0ec6b06da3fa289d26ca0a775af7168cc5a4999c37231754ea5922bde098d22799ba244047b7017fac19d947cfd948d730a2ebd1993c2fd67b5452952baf75242879f0973443634db3c5d552b8463ec84f57fdd0b3edc3ad9d25f02795a6331d361b842f88e1e64ff3df5a5fb8e75362e397b8430ea526617ac7eeb540d8aa4910adfee35ea6eb7050f5177fb44aa52d0904fa08204c7308204c3308204bf308202a7a003020102021445e08d21404af407b4051ef9dc53e8205c1073dd300d06092a864886f70d01010b0500305c310b3009060355040613025553310d300b06035504080c0454657374310e300c06035504070c054c6f63616c310e300c060355040a0c054d794f7267310b3009060355040b0c0243413111300f06035504030c084d79526f6f7443413020170d3235303932313130353931365a180f32303533303230363130353931365a3064310b3009060355040613025553310d300b06035504080c0454657374310e300c06035504070c054c6f63616c310e300c060355040a0c054d794f7267310d300b060355040b0c044f4353503117301506035504030c0e4f43535020526573706f6e64657230820122300d06092a864886f70d01010105000382010f003082010a0282010100bc1edb6e515cdd4184d4240e2835a3a637b70faabe1de2a540be3343c0884d88e166368ab4995388a22312eb3a2454a55323c7d4a452be9f649de9dc4a4b659990ce426c5d96b92716bcb0af4b6b55fd62f3c1d4f2a205c0e9c4af3f2504a3dc59548dd619cbc5470ec608629aec500ac583df95c46376bf1a4f17ba9b5b0fda3fc6b625630628ec2802a36f02325c5c0ef837b4b26a4a0d79f2e51ac862b988157665f257a4434217d6aa36322c0d26bc7d251238764771088eceb8c607f6659145e0c6fd514bf12debce8dde88c706246528d8438c34e2d153b3cdba4a96961cc3b7674d9499992887a5ba866412c95444b885051ad5e7fb5f414269c3e5010203010001a36f306d30090603551d1304023000300b0603551d0f04040302078030130603551d25040c300a06082b06010505070309301d0603551d0e0416041496e7262a6fd98556866a01747e0888388699a3d4301f0603551d230418301680142b9ec2875452d6b5e8b2df6b18edf721549811ad300d06092a864886f70d01010b0500038202010030d3ba2d8daea95881c57ffeba6a7d5991fa977e8df982bdd536094b027222cd389a0b3cc39e2ec60a2547b27612e802cb30579001467281fccaaabc22b5ccff70c31ebf89c1943b98da8bcc661915bc343d19e75a21c35df90d88d508df33005e5563bcc6b954116484314af2eee2442f1d2240d62e06e22a0c59ee3abecba2d79781bb1a36806ac1bdf77d1e0a934b5a194d7d5844fc98a10d5dd2952fe7678ac6fc627667a41f40d518d4bb721974475250272a2f553ee3fe7585dde50aefabeda22db8f3609007de9385afca453ac491999c4c326598f0fc72fa07e4bc314d08bd255750039b28631dbf8ebfb96e74d873b7176cbfbb49078b6965dd5381c666efd69cf210b3eafba151b5e42b38a15cfcdb1702c0e9c343b31f8f15472735a2c1367916973af09204a0d299df5b769b5a716a40319ccc1c9fc5ff325f4760c66743d5449c243b1f5b770b07fa4d9412c06588c2df00183ca56c385d62596dab3f3e350875c836981e9b04fd933980999f8cdc9eb8f5a54c6c1bba3aca210fd23b61d2d5f0cd8ac7ffaf310f1782d3ccb64d72f325c6decb9d92cb8fc9296a8910204d90c20562c64f9df262fb83dc3e091e9d5cdbd4478cdbb4c3d16d6536ef3e969f2db2a5ffad68ca4a82adea0d6cffc610346703805042ef476a2f46ad4c4f40c9c6d9502e7264867febe601257b3bb0f453eef62d8f7865863d24ae"
        `)
    })
})
