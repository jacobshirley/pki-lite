const ecP256PrivateKeyPem = `-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgHqXf+eagxZv4upOh
oXBqmwJnXdbxmUF9ep2CxpzrftChRANCAATJajgbqa1KgBuMvc6IaDP++IPww2hQ
y9UuqbGxAxHovMrBFAC9/k9MrttVz6b7cvDjPkhcb7OQlkTBzZvBodV3
-----END PRIVATE KEY-----`

const ecP256Cert = `-----BEGIN CERTIFICATE-----
MIIDADCCAqWgAwIBAgIUP8SKDJ7p5yrUsU+vNcAcHviAMC0wCgYIKoZIzj0EAwIw
XDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4w
DAYDVQQKDAVNeU9yZzELMAkGA1UECwwCQ0ExETAPBgNVBAMMCE15Um9vdENBMB4X
DTI1MDkyMTEwNTkxN1oXDTI2MDkyMTEwNTkxN1owYTELMAkGA1UEBhMCVVMxDTAL
BgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4wDAYDVQQKDAVNeU9yZzEQMA4G
A1UECwwHU2lnbmluZzERMA8GA1UEAwwISm9obiBEb2UwWTATBgcqhkjOPQIBBggq
hkjOPQMBBwNCAATJajgbqa1KgBuMvc6IaDP++IPww2hQy9UuqbGxAxHovMrBFAC9
/k9MrttVz6b7cvDjPkhcb7OQlkTBzZvBodV3o4IBPjCCATowCQYDVR0TBAIwADAL
BgNVHQ8EBAMCBsAwHQYDVR0lBBYwFAYIKwYBBQUHAwQGCCsGAQUFBwMDMC0GA1Ud
HwQmMCQwIqAgoB6GHGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9jYS5jcmwwgZEGCCsG
AQUFBwEBBIGEMIGBMCgGCCsGAQUFBzAChhxodHRwOi8vbG9jYWxob3N0OjgwODAv
Y2EuY3J0MCYGCCsGAQUFBzABhhpodHRwOi8vbG9jYWxob3N0OjgwODAvb2NzcDAt
BggrBgEFBQcwAYYhaHR0cDovL2xvY2FsaG9zdDo4MDgwL29jc3AtYmFja3VwMB0G
A1UdDgQWBBS7CV7aTxNwS1DbBj8tpTxEnaiKxDAfBgNVHSMEGDAWgBRCVQqlAStA
Xwu5sjGdXdqStIRpXTAKBggqhkjOPQQDAgNJADBGAiEAkz529JIl3MX6BpOR5zAp
ZcLnrZ1CDkU0d5kJBCmJzeQCIQCfOL3i6ysXvitG8BXtCOM1e7OlPpEwGvbWHg0P
Tt5rUg==
-----END CERTIFICATE-----`

const ecP256CaCert = `-----BEGIN CERTIFICATE-----
MIICDTCCAbOgAwIBAgIUdSNb9VeS0d1CFrs+OLO6nfQxTccwCgYIKoZIzj0EAwIw
XDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4w
DAYDVQQKDAVNeU9yZzELMAkGA1UECwwCQ0ExETAPBgNVBAMMCE15Um9vdENBMB4X
DTI1MDkyMTEwNTkxN1oXDTM1MDkxOTEwNTkxN1owXDELMAkGA1UEBhMCVVMxDTAL
BgNVBAgMBFRlc3QxDjAMBgNVBAcMBUxvY2FsMQ4wDAYDVQQKDAVNeU9yZzELMAkG
A1UECwwCQ0ExETAPBgNVBAMMCE15Um9vdENBMFkwEwYHKoZIzj0CAQYIKoZIzj0D
AQcDQgAEFL8bRTvDjlJUMD1I5uMaLRYld5FlZgaTddIacurdFRCqLAsGRelqMA+H
CMpJRhdi3oT39Wg/fIxECamw9ZZ9uKNTMFEwHQYDVR0OBBYEFEJVCqUBK0BfC7my
MZ1d2pK0hGldMB8GA1UdIwQYMBaAFEJVCqUBK0BfC7myMZ1d2pK0hGldMA8GA1Ud
EwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAN9x/wVrFV/fXR2zKPX5x7vp
WOl2B0OJeqEiEXZId5lvAiAGLRj9OCunjvDYDbGQFTUInXTrQT3xgOQezRlTPCfS
Kg==
-----END CERTIFICATE-----`

const ecP256CaCrl = `-----BEGIN X509 CRL-----
MIH0MIGbAgEBMAoGCCqGSM49BAMCMFwxCzAJBgNVBAYTAlVTMQ0wCwYDVQQIDARU
ZXN0MQ4wDAYDVQQHDAVMb2NhbDEOMAwGA1UECgwFTXlPcmcxCzAJBgNVBAsMAkNB
MREwDwYDVQQDDAhNeVJvb3RDQRcNMjUwOTIxMTA1OTE3WhcNMjUxMDIxMTA1OTE3
WqAOMAwwCgYDVR0UBAMCAQEwCgYIKoZIzj0EAwIDSAAwRQIhAP6IzLHFFRAnj+MX
Z5qZ1T7QcBr44gmaJZ4Od2SpZ/RMAiAM5kNFodc+lwIXKQewo8dhNomTnIZ6MTbP
v4qfym6Rmw==
-----END X509 CRL-----`

const ecP256OcspResponse = `-----BEGIN OCSP RESPONSE-----
MIIDvAoBAKCCA7UwggOxBgkrBgEFBQcwAQEEggOiMIIDnjCCAQShZjBkMQswCQYD
VQQGEwJVUzENMAsGA1UECAwEVGVzdDEOMAwGA1UEBwwFTG9jYWwxDjAMBgNVBAoM
BU15T3JnMQ0wCwYDVQQLDARPQ1NQMRcwFQYDVQQDDA5PQ1NQIFJlc3BvbmRlchgP
MjAyNTA5MjExMDU5MTdaMGQwYjBNMAkGBSsOAwIaBQAEFMMBXUhH1UJjC9/mkAgx
tU0Ghr32BBRCVQqlAStAXwu5sjGdXdqStIRpXQIUP8SKDJ7p5yrUsU+vNcAcHviA
MC2CABgPMjAyNTA5MjExMDU5MTdaoSMwITAfBgkrBgEFBQcwAQIEEgQQBKd6AXUm
6nwcmWHERk1NsDAKBggqhkjOPQQDAgNIADBFAiAuhaDhxVrRIfF9ThL/Bj5Zkn0x
1hP2/nUxEiL+X8BW3gIhAOuDwJkvPbZroIeHH+khyfR9M3MPTX4q7fPw0UXdzmjF
oIICPDCCAjgwggI0MIIB2aADAgECAhQ/xIoMnunnKtSxT681wBwe+IAwLjAKBggq
hkjOPQQDAjBcMQswCQYDVQQGEwJVUzENMAsGA1UECAwEVGVzdDEOMAwGA1UEBwwF
TG9jYWwxDjAMBgNVBAoMBU15T3JnMQswCQYDVQQLDAJDQTERMA8GA1UEAwwITXlS
b290Q0EwIBcNMjUwOTIxMTA1OTE3WhgPMjA1MzAyMDYxMDU5MTdaMGQxCzAJBgNV
BAYTAlVTMQ0wCwYDVQQIDARUZXN0MQ4wDAYDVQQHDAVMb2NhbDEOMAwGA1UECgwF
TXlPcmcxDTALBgNVBAsMBE9DU1AxFzAVBgNVBAMMDk9DU1AgUmVzcG9uZGVyMFkw
EwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyP8cv2byD76H8NuHZ+RljpfJDpcHH50A
Cgw8QGDJX3HHcJM30+Q/vcwvAtvYz9PPmN4h57LnaTi6LV+lgT6F5qNvMG0wCQYD
VR0TBAIwADALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwkwHQYDVR0O
BBYEFNzpnkNvgi6/X355gcyAYxKXyqcrMB8GA1UdIwQYMBaAFEJVCqUBK0BfC7my
MZ1d2pK0hGldMAoGCCqGSM49BAMCA0kAMEYCIQD4Nr3sVKcQa37NuVL70sSOytIW
KqBvSNbMwg6rzcdvLAIhAIAoXwp01DohV1CxNsh6kiEnhu08iW2x3ieS9xFScgLZ
-----END OCSP RESPONSE-----`

function pemToUint8Array(pem: string | Uint8Array): Uint8Array {
    pem = typeof pem === 'string' ? pem : new TextDecoder().decode(pem)

    // Remove all headers, footers, and whitespace
    const b64 = pem
        .trim()
        .replace(/-----BEGIN [^-]+-----/, '')
        .replace(/-----END [^-]+-----/, '')
        .replace(/\s+/g, '')

    const binary = atob(b64)
    const bytes = new Uint8Array(binary.length)
    for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i)
    }

    return bytes
}

export const ecP256SigningKeys = {
    privateKey: pemToUint8Array(ecP256PrivateKeyPem),
    cert: pemToUint8Array(ecP256Cert),
    caCert: pemToUint8Array(ecP256CaCert),
    caCrl: pemToUint8Array(ecP256CaCrl),
    ocspResponse: pemToUint8Array(ecP256OcspResponse),
    privateKeyPem: ecP256PrivateKeyPem,
    certPem: ecP256Cert,
    caCertPem: ecP256CaCert,
    caCrlPem: ecP256CaCrl,
    ocspResponsePem: ecP256OcspResponse,
}
